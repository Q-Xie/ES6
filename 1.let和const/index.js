/*
* 基本用法
* ES6新增let命令，用来声明变量。它的用法类似于var,但是所声明的变量，只在let命令所在的代码块内有效。
* */
{
  let a = 10
  var b = 1
}
console.log(b)
console.log(a)
/*
* 上面代码中，let和var声明了两个变量，然后在代码块之外调用这两个变量。结果let声明的变量报错，var声明的变量返回了正确的值。
* 这表明let只在它所在的代码块中有效。
* */

/*
* for循环的计数器，就很适合使用let命令
* */
for (let i = 0; i < 10; i++) {

}
console.log(i)
/*
* 上面代码中，计数器i只在for循环体内有效，在循环体外引用就会报错。如果使用var，那最后输出的是10
* */
var a = []
for (var i = 0; i < 10; i++) {
  a[i] = function () {
    console.log(i)
  }
}
a[6]() // 10

/*
* 上面代码中，变量i是var命令声明的，在全局范围内有效，所以全局只有一个变量i.每次循环，变量i的值都会发生改变，
* 而循环内被赋给数组a的函数内部的console.log(i)，里面的i指向的就是全局的i.也就是说，所有数组a的成员里面的i，
* 指向的都是同一个i,导致运行时输出的是最后一轮的i的值，也就是10。
* 如果是使用let，声明的变量仅在块级作用域内有效，最后输出的是6。
* */
var b = []
for(let j = 0; j < 10; j++) {
  b[j] = function () {
    console.log(j)
  }
}
b[6]() // 6


/*
* for循环还有一个特别之处，就是设置循环变量的那部分是一个父级作用域，而循环体内部是一个单独的子作用域。
* */
for (let i = 0; i < 3; i++) {
  let i = 'abc'
  console.log(i) // abc
}

/*
* 上面代码，会输出3次abc。这表明函数内部的变量i与循环变量i不在同一个作用域，有个字单独的作用域。
* */

/*
* let 不存在变量提升
* */
console.log(foo)
var foo = 2
// console.log(bar)
// let bar = 2

/*
* 变量foo用var命令声明，会发生变量提升，即脚本开始运行时，变量foo已经存在了，但是没有值。所以会输出undefined。
* 变量bar用let命令声明，不会发生变量提升。这表示在声明它之前，变量bar是不存在的。这时如果用到它，会抛出一个错误。
* */

/*
* 暂时性死去
* 只要块级作用域内存在let命令，它所声明的变量就绑定在这个区域，不再受外部的影响。
* */
var temp = 123
if(true){
  // temp = 'abc'
  let temp
}

/*
* 上面代码中，存在全局变量temp,但是在块级作用域内let又声明了一个局部变量temp.导致后者绑定这个块级作用域。所以在let声明变量
* 前，对temp赋值会报错。
* */

/*
* ES6明确规定，如果区块中没存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用
* 这些变量，就会报错。总之，在let命令声明变量之前，该变量都是不可用的。这在语法上成为暂时性死区。
* */

/*
* 不允许重复声明
* let 不允许在相同的作用域内，重复声明同一个变量
* */


/*
* const命令
*
* 基本用法
* const声明一个只读常量。一旦声明，常量的值就不能改变。
* const声明变量不能改变值，这意味着，const一旦声明变量，就必须立即初始化。
* const的作用域跟let一样，只在声明所在的块级作用域内有效。
* const声明的常量也不存在变量提升，同样也存在暂时性死区。
* */
const PI = 3.1415
PI
// PI = 3 //Assignment to constant variable.



/*
* 本质
* const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。
* 对于简单类型的数据(数值，字符串，布尔值)，值就想保存在变量指向的那个内存地址，因此等同于常量。
* 但对于符合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，
* const只能保证这个指针是固定的（即总是指向另一个固定的地址）。至于她指向的数据结构是不是可变的，
* 就完全不可控制了。因此，将一个对象声明为常量必须非常小心。
* */
const foo2 = {}
foo2.prop = 123
console.log(foo2.prop)

const aArr = []
aArr.push('hello')
aArr.length = 0
// aArr = ['dfsd'] 报错

/*
* 如果真的要将对象冻结，应该使用Object.freeze方法
* */
const foo3 = Object.freeze({})
foo3.prop = 234
console.log(foo3.prop) // undefined

/*
* ES6声明变量的六种方法
* var function let const import class
* */

/*
* 顶层对象的属性
* 在浏览器环境中，顶层对象值得就是window对象。在Node中，global就是顶层对象。顶层对象的属性与全局变量是等价的。
* 在过去，顶层对象的属性赋值与全局变量的赋值，是同一件事。
* 顶层对象的属性与全局变量挂钩，被认为是JS语言的最大的设计败笔之一。
* 这样的设计带来了几个很大的问题，首先是没法在编译时就爆出变量未声明的错误，只有运行时才知道
* 其次，程序员很容易不知不觉就创建了全局变量。
* 最后，顶层对象的属性是导出可以读写的，这非常不利于模块化编程。
* 另一方面，window对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象。
*
* ES6为了改变这一点，一方面规定为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象属性。
* 另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。
* 也就是说ES6开始，全局变量将逐步与顶层对象的属性脱钩。
* */

/*
* globalThis对象
* JS语言存在一个顶层对象，它提供全局环境，所有代码是在这个环境中运行。但是，蒂尼高层对象在各种实现里面，是不统一的。
* 现有一个提案，在语言标准的层面上，引入globalThis作为顶层对象，也就是说，任何环境下，globalThis都是存在的，都可以
* 从它拿到顶层对象。指向全局环境下的this.
* */


























